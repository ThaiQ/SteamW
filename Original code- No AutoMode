
package org.usfirst.frc.team5027.robot;

import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.*;
import org.usfirst.frc.team5027.robot.commands.ExampleCommand;
import org.usfirst.frc.team5027.robot.subsystems.ExampleSubsystem;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {

	public static final ExampleSubsystem exampleSubsystem = new ExampleSubsystem();
	public static OI oi;
	Victor TopL = new Victor(1); // motors
	Victor BotL = new Victor(2);
	Victor TopR = new Victor(3);
	Victor BotR = new Victor(4); //BotR

	RobotDrive run = new RobotDrive(TopL, BotL, TopR, BotR);

	Spark shoot = new Spark (5);
	Spark feed = new Spark (6);  //feed

	Joystick stick1 = new Joystick(1); // Controllers
	Joystick stick2 = new Joystick(2);

	int fly = 1;       // controller buttons
	int forward = 5;
	int backward = 6;
	int emergency = 7;

	Timer time = new Timer();

	Command autonomousCommand;
	SendableChooser<Command> chooser = new SendableChooser<>();

	/**
	 * This function is run when the robot is first started up and should be
	 * used for any initialization code.
	 */
	@Override
	public void robotInit() {
		oi = new OI();
		chooser.addDefault("Default Auto", new ExampleCommand());
		// chooser.addObject("My Auto", new MyAutoCommand());
		SmartDashboard.putData("Auto mode", chooser);

		run.setInvertedMotor(RobotDrive.MotorType.kFrontLeft, true);
		run.setInvertedMotor(RobotDrive.MotorType.kRearLeft, true);
		run.setInvertedMotor(RobotDrive.MotorType.kFrontRight, true);
		run.setInvertedMotor(RobotDrive.MotorType.kRearRight, true);
		
		CameraServer.getInstance().startAutomaticCapture(1);
		CameraServer.getInstance().startAutomaticCapture(0);
	}

	/**
	 * This function is called once each time the robot enters Disabled mode.
	 * You can use it to reset any subsystem information you want to clear when
	 * the robot is disabled.
	 */
	@Override
	public void disabledInit() {

	}

	@Override
	public void disabledPeriodic() {
		Scheduler.getInstance().run();
	}

	/**
	 * This autonomous (along with the chooser code above) shows how to select
	 * between different autonomous modes using the dashboard. The sendable
	 * chooser code works with the Java SmartDashboard. If you prefer the
	 * LabVIEW Dashboard, remove all of the chooser code and uncomment the
	 * getString code to get the auto name from the text box below the Gyro
	 *
	 * You can add additional auto modes by adding additional commands to the
	 * chooser code above (like the commented example) or additional comparisons
	 * to the switch structure below with additional strings & commands.
	 */
	@Override
	public void autonomousInit() {
		autonomousCommand = chooser.getSelected();

		/*
		 * String autoSelected = SmartDashboard.getString("Auto Selector",
		 * "Default"); switch(autoSelected) { case "My Auto": autonomousCommand
		 * = new MyAutoCommand(); break; case "Default Auto": default:
		 * autonomousCommand = new ExampleCommand(); break; }
		 */

		// schedule the autonomous command (example)
		if (autonomousCommand != null)
			autonomousCommand.start();

		time.start();
		time.reset();

	}

	/**
	 * This function is called periodically during autonomous
	 */
	@Override
	public void autonomousPeriodic() {
		Scheduler.getInstance().run();
	}

	@Override
	public void teleopInit() {
		// This makes sure that the autonomous stops running when
		// teleop starts running. If you want the autonomous to
		// continue until interrupted by another command, remove
		// this line or comment it out.
		if (autonomousCommand != null)
			autonomousCommand.cancel();
	}

	/**
	 * This function is called periodically during operator control
	 */
	@Override
	public void teleopPeriodic() {
		Scheduler.getInstance().run();

		run.arcadeDrive(stick1); // driving

		if (stick1.getRawButton(fly)){shoot.set(-1); }
		else { shoot.set(0); }
		
		
		if (stick1.getRawButton(forward)){
			feed.set(0.2);
		}else if(stick1.getRawButton(backward)){
			feed.set(-0.2);
		}else if (stick1.getRawButton(emergency)){
			feed.set(1);}
		else{
			feed.set(0);
		}
		
		if (stick2.getRawButton(forward)){
			feed.set(0.2);
		}else if(stick2.getRawButton(backward)){
			feed.set(-0.2);
		}else if (stick2.getRawButton(emergency)){
			feed.set(1);}
		else{
			feed.set(0);
		}
		
	}

	/**
	 * This function is called periodically during test mode
	 */
	@Override
	public void testPeriodic() {
		LiveWindow.run();
	}
}
